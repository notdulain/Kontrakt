import java_cup.runtime.*;

//parser code section
parser code {:
  public void report_error(String message, Object info) {
    System.err.println("‚ùå Parse Error: " + message);
  }
  
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
  
  public void syntax_error(Symbol cur_token) {
    report_error("Syntax error at line " + cur_token.left, cur_token);
  }
:}

//Terminals (tokens from the scanner)
terminal CONFIG, TEST, EXPECT;
terminal BASE_URL;
terminal GET, POST, PUT, DELETE;
terminal String NUMBER, IDENTIFIER, STRING;
terminal LBRACE, RBRACE, SEMICOLON;
terminal STATUS, EQUALS;
terminal BODY;
terminal HEADER, CONTAINS;
terminal LET;

//non-terminals (grammar rules)
non terminal program;
non terminal config_block;
non terminal config_item;
non terminal config_items_list;
non terminal test_block;
non terminal test_block_list;
non terminal statement;
non terminal statement_list;
non terminal assertion;
non terminal request_body;
non terminal variable_decl;
non terminal variable_list;

//grammar
start with program;

//a program will be one or more test blocks
program ::= 
  config_block variable_list test_block_list
    {: 
      System.out.println("‚úÖ Parsed program with config-block, variables and tests"); 
    :}
  ;

//config block (optional)
config_block ::=
    /* empty */
  | CONFIG LBRACE config_items_list RBRACE
    {: 
      System.out.println("‚öôÔ∏è  Config block parsed");
    :}
  ;

//config items
config_items_list ::=
    /* empty */
  | config_items_list config_item
  ;

//config item
config_item ::=
    BASE_URL EQUALS STRING:url SEMICOLON
    {: 
      System.out.println("  üîó base_url = " + url);
    :}
  | HEADER STRING:key EQUALS STRING:value SEMICOLON
    {: 
      System.out.println("  üìã header " + key + " = " + value);
    :}
  ;

//the main segment of our DSL: "test Login {...}"
test_block ::= 
    TEST IDENTIFIER:name LBRACE statement_list RBRACE
    {: 
      System.out.println("üß™ Test: " + name + "(multiple statements)");
      //System.out.println("üéâ Test block parsed successfully!");
    :}
  ;

//handling one or more test blocks
test_block_list ::=
    test_block
  | test_block_list test_block
  ;

//statement rule
statement ::=
    GET STRING:path SEMICOLON
    {: 
      System.out.println("  üì° GET " + path);
    :}
  | POST STRING:path LBRACE request_body RBRACE SEMICOLON
    {: 
      System.out.println("  üì° POST " + path);
    :}
  | PUT STRING:path LBRACE request_body RBRACE SEMICOLON
    {: 
      System.out.println("  üì° PUT " + path);
    :}
  | DELETE STRING:path SEMICOLON
    {: 
      System.out.println("  üì° DELETE " + path);
    :}
  | assertion
  ;

//statement_list can be one or more statements
statement_list ::=
    statement
    {: 
      System.out.println("  ‚Üí 1 statement parsed");
    :}
  | statement_list statement
    {: 
      System.out.println("  ‚Üí Another statement parsed");
    :}
  ;

//assertion rule
assertion ::=
    EXPECT STATUS EQUALS NUMBER:code SEMICOLON
    {: 
      System.out.println("  ‚úì Expect status = " + code);
    :}
  | EXPECT BODY CONTAINS STRING:text SEMICOLON
    {: 
      System.out.println("  ‚úì Expect body contains: " + text);
    :}
  | EXPECT HEADER STRING:name EQUALS STRING:value SEMICOLON
    {: 
      System.out.println("  ‚úì Expect header " + name + " = " + value);
    :}
  | EXPECT HEADER STRING:name CONTAINS STRING:substr SEMICOLON
    {: 
      System.out.println("  ‚úì Expect header " + name + " contains: " + substr);
    :}
  ;

//request body (optional)
request_body ::=
    /* empty */
    {: 
      System.out.println("    (no req body)");
    :}
  | BODY EQUALS STRING:content SEMICOLON
    {: 
      System.out.println("    üìÑ body = " + content);
    :}
  ;

//variable declaration
variable_decl ::=
    LET IDENTIFIER:name EQUALS STRING:value SEMICOLON
    {: 
      System.out.println("üìå Variable: " + name + " = " + value);
    :}
  | LET IDENTIFIER:name EQUALS NUMBER:value SEMICOLON
    {: 
      System.out.println("üìå Variable: " + name + " = " + value);
    :}
  ;

//variable list (optional)
variable_list ::=
    /* empty */
  | variable_list variable_decl
  ;

