import java_cup.runtime.*;

//parser code section
parser code {:
  public void report_error(String message, Object info) {
    System.err.println("‚ùå Parse Error: " + message);
  }
  
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
  
  public void syntax_error(Symbol cur_token) {
    report_error("Syntax error at line " + cur_token.left, cur_token);
  }
:}

//Terminals (tokens from the scanner)
terminal CONFIG, TEST, EXPECT;
terminal GET, POST, PUT, DELETE;
terminal String NUMBER, IDENTIFIER, STRING;
terminal LBRACE, RBRACE, SEMICOLON;
terminal STATUS, EQUALS;

//non-terminals (grammar rules)
non terminal program;
non terminal test_block;
non terminal statement;
non terminal statement_list;
non terminal assertion;

//grammar
start with program;

//a program will be one or more test blocks
program ::= 
    test_block
    {: 
      System.out.println("‚úÖ Parsed 1 test block"); 
    :}
  | program test_block
    {: 
      System.out.println("‚úÖ Parsed another test block"); 
    :}
  ;

//the main segment of our DSL: "test Login {...}"
test_block ::= 
    TEST IDENTIFIER:name LBRACE statement_list RBRACE
    {: 
      System.out.println("üß™ Test: " + name + "(multiple statements)");
      //System.out.println("üéâ Test block parsed successfully!");
    :}
  ;

//statement rule
statement ::=
    GET STRING:path SEMICOLON
    {: 
      System.out.println("  üì° GET " + path);
    :}
  | POST STRING:path LBRACE RBRACE SEMICOLON
    {: 
      System.out.println("  üì° POST " + path);
    :}
  | assertion
  ;

//statement_list can be one or more statements
statement_list ::=
    statement
    {: 
      System.out.println("  ‚Üí 1 statement parsed");
    :}
  | statement_list statement
    {: 
      System.out.println("  ‚Üí Another statement parsed");
    :}
  ;

//assertion rule
assertion ::=
    EXPECT STATUS EQUALS NUMBER:code SEMICOLON
    {: 
      System.out.println("  ‚úì Expect status = " + code);
    :}
  ;

